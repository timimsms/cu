name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: ['1.22', '1.23', '1.24']
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}
    
    - name: Get dependencies
      run: go mod download
    
    - name: Run tests
      run: |
        go test -v -race -coverprofile coverage.txt -covermode atomic ./...
    
    - name: Upload coverage
      if: matrix.os == 'ubuntu-latest' && matrix.go == '1.24'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.txt
        flags: unittests
        fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
    
    - name: Build binary
      run: go build -v ./cmd/cu
    
    - name: Test binary
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          ./cu.exe --version
        else
          ./cu --version
        fi
      shell: bash

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
    
    - name: Run gosec
      uses: securego/gosec@master
      with:
        args: -fmt sarif -out gosec-results.sarif ./...
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec-results.sarif